function assertUnreachableTarget(_x: never): never {
	throw new Error('Unsupported target');
}


/*
out = ''
for i in range(256):
	txt = bytes([i])
	try:
		char = txt.decode('cp1250')
	except:
		char = '\0'
	#print(i, ord(char))
	out += str(ord(char)) + ', '
print(out)
*/
const cp1250 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 8364, 0, 8218, 0, 8222, 8230, 8224, 8225, 0, 8240, 352, 8249, 346, 356, 381, 377, 0, 8216, 8217, 8220, 8221, 8226, 8211, 8212, 0, 8482, 353, 8250, 347, 357, 382, 378, 160, 711, 728, 321, 164, 260, 166, 167, 168, 169, 350, 171, 172, 173, 174, 379, 176, 177, 731, 322, 180, 181, 182, 183, 184, 261, 351, 187, 317, 733, 318, 380, 340, 193, 194, 258, 196, 313, 262, 199, 268, 201, 280, 203, 282, 205, 206, 270, 272, 323, 327, 211, 212, 336, 214, 215, 344, 366, 218, 368, 220, 221, 354, 223, 341, 225, 226, 259, 228, 314, 263, 231, 269, 233, 281, 235, 283, 237, 238, 271, 273, 324, 328, 243, 244, 337, 246, 247, 345, 367, 250, 369, 252, 253, 355, 729]


export function encode(txt: string, encoding: 'utf-8' | 'cp1250'): Uint8Array {
	if (encoding === 'utf-8') {
		const encoder = new TextEncoder()
		return encoder.encode(txt)
	}

	if (encoding === 'cp1250') {
		const out = new Uint8Array(txt.length)
		for (let i = 0; i < txt.length; ++i) {
			const codePoint = txt.codePointAt(i) || 0
			const nth = cp1250.indexOf(codePoint)
			out[i] = nth !== -1 ? nth : 0
		}
		return out
	}

	assertUnreachableTarget(encoding)
}
